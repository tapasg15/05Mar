Q1. How can you create a Bokeh plot using Python code?
Ans:- Creating a Bokeh plot using Python code.

1. Importing Bokeh: Start by importing the necessary Bokeh modules, such as figure, show, and output_file.

2. Creating a Figure: Use the figure() function to create a Bokeh figure object. This object defines the basic layout and properties of the plot.

3. Adding Renderer: Add renderers to the figure to represent the data you want to visualize. Bokeh provides various renderers for different types of data, such as lines, circles, bars, and images.

4. Customizing Properties: Customize the appearance of the plot elements using various properties, such as line width, color, fill color, legend labels, and axis labels.

5. Saving or Displaying the Plot: Save the plot as an HTML file using output_file() or display it directly in the notebook using show().


Q2. What are glyphs in Bokeh, and how can you add them to a Bokeh plot? Explain with an example.
Ans:- In Bokeh, glyphs are the basic graphical shapes that are used to represent data points in a plot. They are vectorized, meaning that they can be efficiently rendered for large datasets. Bokeh provides a variety of glyphs for different types of data, such as circles, squares, triangles, lines, bars, and images.

To add glyphs to a Bokeh plot, you use the appropriate glyph renderer function provided by Bokeh. Each renderer function takes a set of parameters that define the properties of the glyph, such as the data to be plotted, the position of the glyphs, the size and color of the glyphs, and any additional attributes specific to the glyph type.

Example:
from bokeh.plotting import figure, show

# Prepare some data
x = [1, 2, 3, 4, 5]
y = [3, 5, 7, 2, 1]

# Create a figure object
p = figure(title="Scatter Plot")

# Add a circle glyph renderer
p.circle(x, y, size=10, color="red")

# Show the plot
show(p)

Q3. How can you customize the appearance of a Bokeh plot, including the axes, title, and legend?
Ans:- Customizing the appearance of a Bokeh plot involves modifying various properties of the plot elements, such as the axes, title, legend, and grid lines. Bokeh provides a comprehensive set of properties for customizing the appearance of each plot element.

Axes:

-Labels: Set the axis labels using the xaxis.axis_label and yaxis.axis_label properties.

-Ticks: Customize the tick marks using properties like xaxis.major_tick_line_color, xaxis.minor_tick_line_color, xaxis.major_label_orientation, and xaxis.tick_format.

-Grid lines: Adjust the grid lines using properties like grid.grid_line_color, grid.grid_line_alpha, and grid.grid_line_dash.

Title:

-Text: Set the title text using the title.text property.

-Location: Adjust the title position using the title.location property, which can be above, below, or left.

-Font: Customize the title font using properties like title.text_align, title.text_baseline, title.font_size, and title.font_style.

Legend:

-Location: Control the legend placement using the legend.location property, which can be top_center, top_left, top_right, bottom_center, bottom_left, or bottom_right.

-Orientation: Set the legend orientation using the legend.orientation property, which can be vertical or horizontal.

-Labels: Customize the legend labels using the legend.label_text_color, legend.label_text_font_size, and legend.label_text_font_style properties.

Additional Customization:

-Background: Set the background fill color and alpha using the background_fill_color and background_fill_alpha properties.

-Border: Customize the border line color, alpha, and line width using the border_line_color, border_line_alpha, and border_line_width    properties.

-Outline: Adjust the outline line color, alpha, and line width for all plot elements using the outline_line_color, outline_line_alpha,  and outline_line_width properties.

Q4. What is a Bokeh server, and how can you use it to create interactive plots that can be updated in
real time?
Ans:- A Bokeh server is a web application that allows you to create and display interactive Bokeh plots. Unlike static Bokeh plots that are rendered as HTML files, Bokeh server plots are rendered dynamically in response to user interactions or changes in data. This enables the creation of real-time data visualization applications that can be updated with fresh data as it becomes available.

To use the Bokeh server, you first need to install the necessary Bokeh packages and start the Bokeh server process. Once the server is running, you can create interactive Bokeh applications using Python code. These applications can connect to data sources, subscribe to data streams, and update the plot elements based on the incoming data.

Here's a simplified overview of how to create and run a Bokeh server application:

Create a Bokeh application: Write Python code to define the Bokeh plot layout, data sources, and callback functions that respond to user interactions or data updates.

Start the Bokeh server: Run the bokeh serve command in the terminal, specifying the path to the Bokeh application file.

Access the Bokeh server: Open a web browser and navigate to the URL provided by the bokeh serve command. This will display the interactive Bokeh plot.

Interact with the plot: Use the interactive elements in the plot, such as sliders, buttons, or data selectors, to trigger updates to the plot.

Update data sources: Send new data to the Bokeh server using WebSockets or other data streaming techniques. The Bokeh application will receive the new data and update the plot accordingly.

Bokeh server applications can be deployed to web servers or cloud platforms, allowing users to access and interact with the visualizations from anywhere with a web browser.

Q5. How can you embed a Bokeh plot into a web page or dashboard using Flask or Django?

Ans:- Embedding a Bokeh plot into a web page or dashboard using Flask or Django involves integrating the Bokeh server with the web framework. The general approach is to create a Bokeh application that generates the plot data and layout, and then embed the Bokeh server into the web framework's template or rendering engine.

Flask Integration:

1. Create a Bokeh Application: Develop a Bokeh application using Python code, defining the plot layout, data sources, and any interactive elements. 
2. Start the Bokeh Server: Run the bokeh serve command to start the Bokeh server process, making the plot accessible through a specific URL.

3. Embed the Bokeh Server in Flask: In your Flask application, use the requests library to fetch the Bokeh plot HTML code from the Bokeh server URL.

4. Render the HTML in Flask Templates: Integrate the fetched Bokeh plot HTML code into your Flask templates using Jinja2 or other templating languages.

5. Deploy the Flask Application: Deploy your Flask application to a web server or hosting platform, making the embedded Bokeh plot accessible through the web application's URL.

Django Integration:

1. Create a Bokeh Application: Develop a Bokeh application using Python code, defining the plot layout, data sources, and any interactive elements.

2. Start the Bokeh Server: Run the bokeh serve command to start the Bokeh server process, making the plot accessible through a specific URL.

3. Integrate with Django Templates: In your Django templates, use the iframe tag to embed the Bokeh plot HTML code from the Bokeh server URL.

4. Configure Django URL Routing: Configure Django's URL routing to direct requests to the Bokeh server URL, allowing the embedded plot to be accessed through the Django application's URL.

5. Deploy the Django Application: Deploy your Django application to a web server or hosting platform, making the embedded Bokeh plot accessible through the Django application's URL.